import{_ as t,o as e,c as o,Q as a}from"./chunks/framework.b74c5ffd.js";const c="/stm32notebook/assets/晶振.ddca60ad.png",d="/stm32notebook/assets/晶振2.c6726ee2.png",s="/stm32notebook/assets/复位电路.b7ac42c3.png",r="/stm32notebook/assets/power.49077624.png",n="/stm32notebook/assets/usbSlave.29068276.png",l="/stm32notebook/assets/usbUsart.a6c77210.png",i="/stm32notebook/assets/JTAG.132d243c.png",p="/stm32notebook/assets/boot.b0928c36.png",f=JSON.parse('{"title":"STM32 最小系统构成","description":"","frontmatter":{"next":{"text":"./存储器与寄存器","link":"./存储器与寄存器"}},"headers":[],"relativePath":"stm32最小系统.md","filePath":"stm32最小系统.md"}'),h={name:"stm32最小系统.md"},u=a('<h1 id="stm32-最小系统构成" tabindex="-1">STM32 最小系统构成 <a class="header-anchor" href="#stm32-最小系统构成" aria-label="Permalink to &quot;STM32 最小系统构成&quot;">​</a></h1><p>了解最小系统构成可以帮助我们更好的理解 STM32 的工作原理，在 diy 时也可以作为参考。</p><h2 id="晶振电路" tabindex="-1">晶振电路 <a class="header-anchor" href="#晶振电路" aria-label="Permalink to &quot;晶振电路&quot;">​</a></h2><h3 id="晶振电路提供给单片机工作所需要的时钟" tabindex="-1">晶振电路提供给单片机工作所需要的时钟 <a class="header-anchor" href="#晶振电路提供给单片机工作所需要的时钟" aria-label="Permalink to &quot;晶振电路提供给单片机工作所需要的时钟&quot;">​</a></h3><h4 id="通常不使用单片机内部晶振-使用外部晶振-一般选择-8mhz" tabindex="-1">通常不使用单片机内部晶振，使用外部晶振，一般选择 8MHz <a class="header-anchor" href="#通常不使用单片机内部晶振-使用外部晶振-一般选择-8mhz" aria-label="Permalink to &quot;通常不使用单片机内部晶振，使用外部晶振，一般选择 8MHz&quot;">​</a></h4><p>直接将晶振接入会出现系统工作不稳定的情况，因为晶振会产生一些电感，所以会在晶振两端分别接入电容，电容选择无极性的。一端接晶振一端接地。</p><p>选取的电容大小通常取决于晶振频率大小，通常选 10~33pF，这里选用的是 22pF。</p><p>通常还会在 8M 晶振旁并联一个 1M 的电阻</p><p><img src="'+c+'" alt="晶振1"></p><blockquote><p>图中 VBAT 接入了 3.3V 电源，当电源没有供电时，由 D2 供电,BAT1 是纽扣电池，前面接二极管是为了让 D1 没电时才给 VBAT 供电，以免浪费纽扣电池的里的电</p></blockquote><blockquote><p>图中红色方框框起来的 <strong>&quot;OSC_IN&quot;和&quot;OSC_OUT&quot;</strong> 被称为<strong>网络标号</strong>，说明下面的这个晶振电路图中的 <strong>&quot;OSC_IN&quot;和&quot;OSC_OUT&quot;</strong> 分别和 <strong>23、24</strong>是相连的</p></blockquote><h4 id="这里还使用了一个-32-768k-的晶振供给-rtc-时钟" tabindex="-1">这里还使用了一个 32.768K 的晶振供给 RTC 时钟 <a class="header-anchor" href="#这里还使用了一个-32-768k-的晶振供给-rtc-时钟" aria-label="Permalink to &quot;这里还使用了一个 32.768K 的晶振供给 RTC 时钟&quot;">​</a></h4><p><img src="'+d+'" alt="RTC时钟"></p><h2 id="复位电路" tabindex="-1">复位电路 <a class="header-anchor" href="#复位电路" aria-label="Permalink to &quot;复位电路&quot;">​</a></h2><p><img src="'+s+'" alt="复位"></p><p>复位电路实现系统重启 STM32 的复位引脚为 <strong>NRST</strong> 它是低电平触发，也就是说当 <strong>NRST</strong> 引脚为低电平时，复位电路被触发，系统会复位</p><h3 id="该电路有两种触法方式" tabindex="-1">该电路有两种触法方式 <a class="header-anchor" href="#该电路有两种触法方式" aria-label="Permalink to &quot;该电路有两种触法方式&quot;">​</a></h3><ul><li>按下 <strong>RST</strong> 键</li><li>通过 <strong>RC 电路</strong> 的充放电</li></ul><h2 id="电源电路" tabindex="-1">电源电路 <a class="header-anchor" href="#电源电路" aria-label="Permalink to &quot;电源电路&quot;">​</a></h2><p>STM32 工作电压为 <code>1.8v~3.3v</code> ，通常我们使用的是直流 3.3v</p><h3 id="火牛接口" tabindex="-1">火牛接口 <a class="header-anchor" href="#火牛接口" aria-label="Permalink to &quot;火牛接口&quot;">​</a></h3><p><img src="'+r+'" alt="火牛接口"></p><p><code>DC_IN</code> 电源输入，输入为 <code>5v</code>，通过稳压芯片 <code>1117-3.3</code> 将 <code>5v</code> 输入转为 <code>3.3v</code></p><p><code>D3[电流指示灯]</code></p><p><code>J3</code> <code>J4</code> 为预留的端子，方便后续外接模块供电</p><p><code>J3</code> 为 <code>5v</code> <code>J4</code> 为 <code>3.3v</code></p><h3 id="usb-接口" tabindex="-1">USB 接口 <a class="header-anchor" href="#usb-接口" aria-label="Permalink to &quot;USB 接口&quot;">​</a></h3><p><img src="'+n+'" alt="usb"></p><p><code>VBUS</code> 本身就有 <code>5v</code> 供电，直接接在 <code>VCC</code> 上</p><p>usb 转串口芯片 <code>CH340</code> 也会用到（右半部分）</p><h2 id="下载电路" tabindex="-1">下载电路 <a class="header-anchor" href="#下载电路" aria-label="Permalink to &quot;下载电路&quot;">​</a></h2><h3 id="usb-usart-串口" tabindex="-1">USB USART（串口） <a class="header-anchor" href="#usb-usart-串口" aria-label="Permalink to &quot;USB USART（串口）&quot;">​</a></h3><p><img src="'+l+'" alt=""></p><p>现在的笔记本没有 <code>RS232</code> 芯片 所以需要 <code>CH340</code> usb 转串口芯片</p><p>这块板子使用的是 <code>CH340-C</code> 内部自带晶振 使用相对方便</p><p>这块板子相当于将 <code>USB2</code> 的 <code>D-</code> 和 <code>D+</code> 信号转换后通过 <code>TXD</code> 和 <code>RXD</code> 接在了端子 <code>P4</code> 上，然后再接在<code>STM32</code> 上</p><p>使用端子而不是直接接是因为想通过串口外接模块方便调试，例如 wifi 模块、蓝牙模块、GPS 模块</p><p><code>P4</code> 中 <code>1</code> 和<code>2</code> 短接， <code>3</code> 和<code>4</code> 短接</p><h3 id="jtag-仿真器" tabindex="-1">JTAG 仿真器 <a class="header-anchor" href="#jtag-仿真器" aria-label="Permalink to &quot;JTAG 仿真器&quot;">​</a></h3><p><img src="'+i+'" alt=""></p><blockquote><p>这样接就是标准接法 没啥好说的</p></blockquote><h2 id="启动模式" tabindex="-1">启动模式 <a class="header-anchor" href="#启动模式" aria-label="Permalink to &quot;启动模式&quot;">​</a></h2><p><img src="'+p+'" alt=""></p><table><thead><tr><th style="text-align:center;">BOOT1</th><th style="text-align:center;">BOOT0</th><th style="text-align:center;">启动模式</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">X（1or0）</td><td style="text-align:center;">0</td><td style="text-align:center;">主闪存存储器</td><td>主闪存存储器被选为启动区域</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">系统存储器</td><td>系统存储器被选为启动区域</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">内置 SRAM</td><td>内置 SRAM 被选为启动区域</td></tr></tbody></table><p>需要对 <code>STM32</code> 进行程序下载时进入 <code>系统存储器</code> 模式</p><p>需要 <code>STM32</code> 进入运行模式是就要进进入 <code>主闪存存储器</code> 模式</p><p><s><code>SRAM</code> 模式用于调试，一般不使用，flash 足以</s></p><p><code>BOOT0</code> 通过上位机软件控制，具体看图 <code>USB USART</code></p>',48),b=[u];function m(_,g,q,S,T,k){return e(),o("div",null,b)}const P=t(h,[["render",m]]);export{f as __pageData,P as default};
